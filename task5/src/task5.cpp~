#include "task5.hpp"
#include <cstdlib>
#include <dlfcn.h>

int main(int argc, char *argv[]){


	Integer a = 3;
	std::cout << a << std::endl;

	Customer *customer = new Customer();

	Order *order = new Order();
	Orderline *orderline = new Orderline();

	customer->init();
	order->init();
	orderline->init();


	QueryParser queryParser;
	CreateParser createParser("schema.sql");	
	
	std::unique_ptr<Schema> schema; 
	
	try {
		schema = createParser.parse();
	}catch (CreateParserError& e) {
		std::cerr << e.what() << std::endl;
		return -1;
	}
	
	Semantic semantic(schema);
	
	while(true){
		try {


			Query query = queryParser.parse();
			semantic.setQuery(query);
			semantic.analysis();

			system("./compiletree.sh");
			
			void* handle=dlopen("./tree_expression.so",RTLD_NOW);
			if (!handle) {
				std::cout << "bac" << std::endl;
				std::cerr << "error: " << dlerror() << std::endl;
				exit(1);
			}

			auto fn=reinterpret_cast<Customer* (*)(Customer*)>(dlsym(handle, "print"));
			if (!fn) {
				std::cerr << "error: " << dlerror() << std::endl;
				exit(1);
			}

			fn(customer);


			if (dlclose(handle)) {
				std::cerr << "error: " << dlerror() << std::endl;
				exit(1);
			}

			system("./compilequery.sh");


			void* handlequery = dlopen("./query_expression.so",RTLD_NOW);
			if (!handlequery) {
				std::cerr << "error: " << dlerror() << std::endl;
				exit(1);
			}
			auto fnn=reinterpret_cast<Customer* (*)(Customer*)>(dlsym(handlequery, "query"));
			if (!fnn) {
				std::cerr << "error: " << dlerror() << std::endl;
				exit(1);
			}
			fnn(customer);
			if (dlclose(handlequery)) {
				std::cerr << "error: " << dlerror() << std::endl;
				exit(1);
			}


			std::cout << "please do more queries if you want." << std::endl;
	
		} catch (ParserError& e) {
			std::cerr << e.what() << std::endl;
		} catch (SemanticError& e){
			std::cerr << e.what() << std::endl;
		}
	}


	return 0;
}
